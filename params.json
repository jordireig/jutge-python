{
  "name": "jutge-python",
  "tagline": "Simple function to read input from Python for problems in Jutge.org",
  "body": "# The `jutge` package [![Build Status](https://travis-ci.org/jutge-org/jutge-python.svg?branch=master)](https://travis-ci.org/jutge-org/jutge-python) [![Python Versions](https://img.shields.io/pypi/v/jutge.svg)](https://pypi.python.org/pypi/jutge) [![PyPi Version](https://img.shields.io/pypi/pyversions/jutge.svg)](https://pypi.python.org/pypi/jutge)\r\n\r\n\r\n![Logo](logo.png)\r\n\r\nThis tiny package offers a simple function to read input from\r\nPython for problems in Jutge.org. It was built in order to offer\r\nbeginners an easy interface to read data in\r\n[Jutge.org](https://www.jutge.org) problems.\r\n\r\n\r\n# Installation\r\n\r\n- Python3:\r\n    - Install with `pip3 install jutge`.\r\n    - Upgrade to latest version with `pip3 install --upgrade jutge`.\r\n    - Uninstall with `pip3 uninstall jutge`.\r\n- Python:\r\n    - Install with `pip install jutge`.\r\n    - Upgrade to latest version with `pip install --upgrade jutge`.\r\n    - Uninstall with `pip uninstall jutge`.\r\n\r\n\r\n# Description\r\n\r\nThis package exports a `read` function that returns the next token of the\r\ninput. The type of the token must be given as a parameter: `read(int)`,\r\n`read(float)`, `read(str)`, `read(chr)`... In the event no more tokens are available,\r\n`read` returns `None`. Except for characters, tokens are separated by words, so that `read(str)`\r\nreturns the next word. Whitespace characters cannot be obtained.\r\n\r\nSample program to read two numbers and write their maximum:\r\n\r\n```python\r\nfrom jutge import read\r\n\r\nx = read(int)\r\ny = read(int)\r\nif x > y:\r\n    m = x\r\nelse:\r\n    m = y\r\nprint(m)\r\n```\r\n\r\nSample program to compute the sum of a sequence of integers:\r\n\r\n```python\r\nfrom jutge import read\r\n\r\ns = 0\r\nx = read(int)\r\nwhile x is not None:\r\n    s = s + x\r\n    x = read(int)\r\nprint(s)\r\n```\r\n\r\n\r\nSample program to count the number of 'A' characters in a text:\r\n\r\n```python\r\nfrom jutge import read\r\n\r\nn = 0\r\nc = read(chr)\r\nwhile c is not None:\r\n    if c == 'A':\r\n        n = n + 1\r\n    c = read(chr)\r\nprint(n)\r\n```\r\n\r\nOf course, you can also just import the package and prefix the `read` function with `jutge`:\r\n\r\n```python\r\nimport jutge, math\r\n\r\nx = jutge.read(float)\r\nprint(math.sin(x))\r\n```\r\n\r\n\r\n\r\n## Multiple tokens\r\n\r\nThe `read` function also admits a variable number of parameters. If no parameter\r\nis given, it defaults to `str`. If more than one parameter is given, it returns\r\na list with as many tokens as requested, each of the corresponding type, filling\r\nthe list with `None` values if input is exhausted.\r\n\r\nSample program to compute the sum of two floats:\r\n\r\n```python\r\nfrom jutge import read\r\n\r\na, b = read(float, float)\r\nprint(a + b)\r\n```\r\n\r\n## Usage of a file stream\r\n\r\nAdditionally, the `read` function accepts a `file` keyword argument that specifies the file stream to read from. By default, `file` stands for `sys.stdin`.\r\n\r\nSample program to read each number from an open file:\r\n\r\n```python\r\nfrom jutge import read\r\n\r\nwith open('file.txt') as f:\r\n    x = read(int, file=f)\r\n    while x is not None:\r\n        print(x)\r\n        x = read(int, file=f)\r\n```\r\n\r\nUnder Python3, one can use `io.StringIO` to read from strings by converting them into streams:\r\n\r\n```Python\r\nimport io\r\nfrom jutge import read\r\n\r\nstring = \"21 40\\n\"\r\nstream = io.StringIO(string)\r\nx = read(int, file=stream)\r\ny = read(int, file=stream)\r\nprint(x + y)\r\n```\r\n\r\n## Basic types\r\n\r\nThe `read` function supports the following basic built-in types:\r\n\r\n- integer (`int`),\r\n- floating point (`float`),\r\n- character (`chr`),\r\n- string (`str`).\r\n\r\n\r\n## User defined types\r\n\r\nAny type whose constructor accepts a `string` is also supported; for example `read(iter)` will yield a string iterator:\r\n\r\n```python\r\nfrom jutge import read\r\n\r\nclass mytype:\r\n    def __init__(self, word): self.word = word\r\n    def sayAWord(self): print(self.word)\r\n\r\na = read(mytype)  # a = mytype(inputstring)\r\nprint('Type name: ' + type(a).__name__)\r\na.sayAWord()\r\n```\r\n\r\n## Version\r\n\r\nThe variable `jutge.version` keeps the version of the package.\r\n\r\n\r\n## Extra features\r\n\r\nAdditionally, when importing the `jutge` package, the maximum depth of the\r\nPython interpreter stack is increased (using\r\n`sys.setrecursionlimit(1000000)`). This feature helps solving some recursive\r\nproblems in Jutge.org.\r\n\r\n\r\n\r\n# Usage warnings\r\n\r\n- When using `read` interactively, you need to end the input with\r\n<kbd>control</kbd> + <kbd>d</kbd> on Linux and Mac or <kbd>control</kbd> +\r\n<kbd>z</kbd> on Windows.\r\n\r\n- Reading many individual characters is very time consuming. If possible, try to read words and iterate through their characters. Eg:\r\n\r\n    ```python\r\n    # slow:\r\n    n = 0\r\n    c = read(chr)\r\n    while c is not None:\r\n        if c == 'A':\r\n            n = n + 1\r\n        c = read(chr)\r\n    print(n)\r\n      \r\n    # faster:\r\n    n = 0\r\n    w = read(str)\r\n    while w is not None:\r\n        for c in w:\r\n            if c == 'A':\r\n                n = n + 1\r\n        w = read(str)\r\n    print(n)\r\n    ```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}